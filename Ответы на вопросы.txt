# опишіть високорівневу архітектуру проекту
Файл:
Google AdSense-Arch.drawio.pdf

---
# виділіть ключові компоненти / мікро сервіси
- Админка продавца (управление креативами, ценами, ключевыми словами итд)
- Админка паблишера (управление сайтами, стоп слова, бан листы итд)
- Система профилей пользователей
- Микросервисы сбора сырой статистики
- Сервис статистики
- Микросервисы/сервис построения отчетов
- Роботы-сборщики контента сайтов паблишеров
- Сервис анализа контекта и построитель ключевых слов на странице
- Система управления финансами (инвойсы, зачисления, выплаты итд)
- Система таргетинга
- Система аукциона

---
# оцініть RPS якщо ваші банери будуть на розміщені на top 10 сайтах в UK (по одному банеру на сторінку)

Файлы:
UK TOP-10 websites stats.pdf
UK TOP-10 websites stats.xlsx

берем статистику statista + alexa
Из statista мы получаем количество посетителей, а из alexa получаем среднее количество просмотров страниц на посетителя + время на сайте.

RPM = {Общее количество пользователей в месяц} * {Количество просмотров страниц на пользователя} / {30 дней} / {Среднее время доступа (с 9:00 до 18:00) = 15 часов} / {Коэфициент = 60min/кол-во минут на пользователя в сутки}

RPS = RPM / 60
Peak RPS = RPS + 25%

Website	"Users per month
(in millions)"	"Daily Pageviews
per Visitor"	Pageviews per month	Pageviews per Day	"Peak PV 
per hour"	"Daily Time on Site
(mm:ss)"	"Daily Time on Site
(in seconds)"	"Daily Time on Site
(in minutes)"	Коэфициент = 60min/кол-во минут на пользователя	RPM	RPS	"RPS 
+ 
25% peak"
bbc.co.uk	701,000,000 	3.79	2,656,790,000 	88,559,667 	5,903,978 	2:22	142	2.367 	25.352 	232,879 	3,881 	4,852 
amazon.co.uk	488,000,000 	5.85	2,854,800,000 	95,160,000 	6,344,000 	7:05	425	7.083 	8.471 	748,944 	12,482 	15,603 
Google.co.uk	384,000,000 	4.34	1,666,560,000 	55,552,000 	3,703,467 	5:12	312	5.200 	11.538 	320,967 	5,349 	6,687 
eBay.co.uk	321,000,000 	4.97	1,595,370,000 	53,179,000 	3,545,267 	6:54	414	6.900 	8.696 	407,706 	6,795 	8,494 
Wikipedia.org	303,000,000 	3.1	939,300,000 	31,310,000 	2,087,333 	3:42	222	3.700 	16.216 	128,719 	2,145 	2,682 
gov.uk	171,000,000 	2.62	448,020,000 	14,934,000 	995,600 	3:06	186	3.100 	19.355 	51,439 	857 	1,072 
Dailymail.co.uk	170,000,000 	2.33	396,100,000 	13,203,333 	880,222 	4:45	285	4.750 	12.632 	69,684 	1,161 	1,452 
Theguardian.com	152,000,000 	2.91	442,320,000 	14,744,000 	982,933 	2:41	161	2.683 	22.360 	43,959 	733 	916 
Pornhub.com	141,000,000 	3.36	473,760,000 	15,792,000 	1,052,800 	10:26	626	10.433 	5.751 	183,070 	3,051 	3,814 
Reddit.com	131,000,000 	4.62	605,220,000 	20,174,000 	1,344,933 	5:45	345	5.750 	10.435 	128,889 	2,148 	2,685 
											38,604 	48,255 

Итого получилось 48тыс RPS.

---
# як ви організуєте систему таргетингу реклами?

Система таргетинга рекламы:
На вход передается профиль текущего пользователя.
Основные параметры: geo, возраст, ключевые слова.
Работает цепочка весовых коэфициентов:
Каждому критерию ставится свой коефициент: geo, возраст, ключевые слова.
После чего креативы сортируются по полученному весу и выдается, например, ТОП-10.
После чего этот ТОП-10 передается системе аукциона, которая на основании ставок выбирает победителя.
Основные критерии выбора победителя:
CTR креатива * цену креатива
Получаем некий коефициант "предсказания" клика при указанной цене.
Сортируем результаты по этому коэфициенту и выдаем TOP-1.
Так-же можно организовать некий вариант fallback и выдавать TOP-2 (или TOP-3). И в случае если креатив не отобразился у пользователя, делать подмену креатива на лету.

---
# які технології запропонуєте?

Данный вопрос зависит от рынка. И от сроков, за которые нужно собрать команды.
Практически на любой технологии можно будет организовать подобную систему.
Ограничены только ресурсами (люди + железо). И т.к. в современном мире стоимость железа в разы меньше, чем стоимость человеко/часа, то я бы в расчетах делал акцент только на рынок и, следовательно, данный вопрос очень плотно завязан на команде рекрутинга, или на текущей команде разработчиков, если такая имеется.

Как вариант:

Языки:
UI|API - быстрая разработка: PHP, Python, Java, Node.js
Ряд сервисов статистики: PHP, Java, Python, Go, Node.js

БД:
Хранение финансов + админки = Реляционная СУБД (MySQL, PostgeSQL)
Статистика: Redis + Vertica | Clickhouse

MQ:
Kafka | RabbitMQ

---
# як будете трекати статистику?

Это может быть "кластер" микросервисов, каждый из которых хранит свою дельту по показам и кликам и с заданной перриодичностью делает синхронизацию с основной базой. В результате, если микросервис какой-то "умрет", то мы потеряем только эту дельту (и то не факт, что потреяем, если он потом оживет и синхронизируется в нормальном формате).

---
# де будете зберігати статистику за показами / клікам?

Каждый микросервис может сохранять в сыром виде, например, в Redis.
В качестве основного хранилища предлагаю колоночную базу, такую как Вертика или КликХаус.

---
# оцініть орієнтовний Total Cost of Ownership

Откровенно говоря, на данный момент сложный для меня вопрос.
Давайте сделаем очень грубые просчеты:
1) На разработку системы нужна команда из 20 человек, время разработки 1,5 года при средней з/п $4000.
Итого 20*4000*18 = $1'440'000
(не учтены... налоги, аренда офисов, покупка оборудования итд)
2) На серверную составляющую:
это ооооочень грубый расчет. прошу не судить строго.
Один сервер обрабатывает 2500 RPS.
Для полноценной системы нам нужно 20 серверов.
Один сервер нам обходится $1000/мес.
Итого, имеем $20000*18 = $360'000
3) Не учтено еще ооооочень много всего...
Рекрутеры, саппорт, менеджмент, продажники, маркетинг(!)
Очень прошу простить за столь грубый расчет, но правда, банально уперся во время на детальный анализ всего этого и просчет.
Реально... прошу понять и простить...